Description: >
    TIBCO JasperReports Server BYOL 7.5.0 for Docker.

    This template launches a base TIBCO JasperReports Server BYOL docker image, creates ECR repos 'jasperserver-pro' and 'jasperserver-pro-cmdline'and pushes base docker images into the ECR repo.
    This template also provides you an option to create an S3 bucket and folder structure inside the bucket required for base docker image customization.
    If you update this template for another JasperReports Server version, change the AWSRegionToAMI and the JasperReportsServerVersion in the UserData below.
    Copyright 2019-2020, TIBCO Software Inc. All Rights Reserved.

Parameters:

    KeyName:
        Description: Select an existing key pair. You must provide existing key pair to be able to SSH into EC2 instances.
        Type: AWS::EC2::KeyPair::KeyName
        MinLength: 1
        MaxLength: 64
        AllowedPattern: '[-_ a-zA-Z0-9]*'
        ConstraintDescription: Must be the name of an existing key pair. It can contain only alphanumeric characters, spaces, dashes and underscores.

    S3BucketName:
        Description: Provide name for S3 bucket. If blank, one will be created for you.
        Type: String
        MaxLength: 63
        ConstraintDescription: Must comply with AWS S3 bucket naming convention.

    JasperReportsServerVersion:
        Description: In the AMI you are using. Update AMI and this version number.
        Type: String
        MinLength: 1
        MaxLength: 63
        Default: '7.5.0'
        ConstraintDescription: Should be a proper version number.

    VPCID:
      Type: 'AWS::EC2::VPC::Id'
      Description: VpcId of your existing Virtual Private Cloud (VPC)

    PrivateSubnet:
      Description: ID of private subnet for the image creation Workload
      Type: 'AWS::EC2::Subnet::Id'

    JaspersoftForDockerURL:
        Description: URL to a zip file containing TIBCOSoftware/js-docker
        Type: String
        MaxLength: 100
        Default: "https://github.com/TIBCOSoftware/js-docker/zipball/master"
        ConstraintDescription: Can be a release ZIP, or point to a branch zipball, like the default.

Metadata: 
    AWS::CloudFormation::Interface: 
      ParameterGroups: 
        - 
          Label: 
            default: "Network"
          Parameters:
            - VPCID
            - PrivateSubnet
        - 
          Label: 
            default: "Bucket"
          Parameters:
            - ExtBucketName
      ParameterLabels:
        ExtBucketName:
            default: "S3 Bucket Name:"

Conditions:
    HasKeyName:
      !Not [!Equals [!Ref KeyName, ""]]
    CreateS3BucketCondition:
      !Equals [!Ref S3BucketName, ""]

Mappings:

  AWSRegionAMI:
    us-east-1:
      '64': ami-0f6d3ef8e53f204e9
    us-east-2:
      '64': ami-07f4e1c328364f8e4
    us-west-1:
      '64': ami-0f9f10a52ce57e08a
    us-west-2:
      '64': ami-0702731f9db377eb3
    ca-central-1:
      '64': ami-0d62d0215cb127fde
    eu-central-1:
      '64': ami-03416724bb8fbcb29
    eu-west-1:
      '64': ami-04ffae4f29bb4704c
    eu-west-2:
      '64': ami-07db901a8a06212e3
    eu-west-3:
      '64': ami-065a2eb9e4e60fb03
    eu-north-1:
      '64': ami-d255deac
    ap-southeast-1:
      '64': ami-09e028879b48bdf8e
    ap-southeast-2:
      '64': ami-0133968d004c2627a
    ap-south-1:
      '64': ami-05984a0227a13875e
    ap-northeast-1:
      '64': ami-0a707cd6956f3d8a0
    ap-northeast-2:
      '64': ami-0bfcf731282d1dde2
    sa-east-1:
      '64': ami-09383944bc61d70b5


Resources:

#################### EC2 Instance for pushing JasperReports Server base images to ECR ####################

    FirstEC2Instance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !FindInMap 
              - AWSRegionAMI
              - !Ref 'AWS::Region'
              - '64'
            InstanceType: m5.large
            KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
            BlockDeviceMappings: 
              - DeviceName: "/dev/xvda"
                Ebs: 
                  VolumeSize: "15"
            IamInstanceProfile: !Ref ECRInstanceProfile
            InstanceInitiatedShutdownBehavior: stop
            SubnetId: !Ref PrivateSubnet
            UserData: 
                Fn::Base64: !Sub |
                    #!/bin/bash
                    echo 'JasperReports Server-Containers-AWS: Start of EC2 Instance UserData execution...'
                    echo "Install Docker..."
                    sudo yum update
                    sudo yum -y install docker unzip
                    sudo service docker start
                    #sudo usermod -aG docker $USER
                    
                    echo 'Installing JasperReports Server images for version ${JasperReportsServerVersion}'
                    cd /usr/share/jrs_dist/

                    echo 'Get js-docker from TIBCOSoftware Github'
                    wget "${JaspersoftForDockerURL}" -O js-dockerrepo.zip --no-verbose
                    unzip -q js-dockerrepo.zip
                    mv $(ls -d TIBCOSoftware-js-docker*/)/* .
                    #ls -l

                    echo 'unzip WAR from jasperreports-server-bin'
                    cd jasperreports-server-bin
                    #ls -l
                    mkdir jasperserver-pro
                    unzip -q jasperserver-pro.war -d jasperserver-pro
                    #ls -l jasperserver-pro
                    #ls -l buildomatic
                    cd ..

                    docker build -f Dockerfile --build-arg HTTP_PORT=80 --build-arg HTTPS_PORT=443 --build-arg EXPLODED_INSTALLER_DIRECTORY=jasperreports-server-bin -t jasperserver-pro:${JasperReportsServerVersion} .
                    docker build -f Dockerfile-cmdline --build-arg EXPLODED_INSTALLER_DIRECTORY=jasperreports-server-bin -t jasperserver-pro-cmdline:${JasperReportsServerVersion} .

                    cd kubernetes
                    docker build -f Dockerfile-cmdline-k8s --build-arg JasperReportsServerVersion=${JasperReportsServerVersion} -t jasperserver-pro-cmdline:k8s-${JasperReportsServerVersion} .

                    cd ../platforms/aws
                    docker build -f Dockerfile-s3 --build-arg JasperReportsServerVersion=${JasperReportsServerVersion} -t jasperserver-pro:s3-${JasperReportsServerVersion} .
                    docker build -f Dockerfile-cmdline-s3 --build-arg JasperReportsServerVersion=${JasperReportsServerVersion} -t jasperserver-pro-cmdline:s3-${JasperReportsServerVersion} .
      
                    echo 'ECR login...'
                    $(aws ecr get-login --region ${AWS::Region} --no-include-email)
                    echo 'Create image repositories ...'
                    if aws ecr describe-repositories --region ${AWS::Region} --repository-names jasperserver-pro | grep repositoryUri; then
                        echo 'jasperserver-pro ECR Repository already exists, skipping repository creation...'
                    else 
                        echo 'jasperserver-pro ECR Repository does not exist, creating...'
                        aws ecr create-repository --region ${AWS::Region} --repository-name jasperserver-pro
                    fi
                    if aws ecr describe-repositories --region ${AWS::Region} --repository-names jasperserver-pro-cmdline | grep repositoryUri; then
                        echo 'jasperserver-pro-cmdline ECR Repository already exists, skipping repository creation...'
                    else 
                        echo 'jasperserver-pro-cmdline ECR Repository does not exist, creating...'
                        aws ecr create-repository --region ${AWS::Region} --repository-name jasperserver-pro-cmdline
                    fi
      
                    echo 'Tagging and pushing to ECR...'
      
                    docker tag jasperserver-pro:${JasperReportsServerVersion} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:${JasperReportsServerVersion}
                    docker tag jasperserver-pro-cmdline:${JasperReportsServerVersion} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro-cmdline:${JasperReportsServerVersion}
                    docker tag jasperserver-pro-cmdline:k8s-${JasperReportsServerVersion} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro-cmdline:k8s-${JasperReportsServerVersion}
                    docker tag jasperserver-pro:s3-${JasperReportsServerVersion} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:s3-${JasperReportsServerVersion}
                    docker tag jasperserver-pro-cmdline:s3-${JasperReportsServerVersion} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro-cmdline:s3-${JasperReportsServerVersion}
                    
                    docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:${JasperReportsServerVersion}
                    docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro-cmdline:${JasperReportsServerVersion}
                    docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro-cmdline:k8s-${JasperReportsServerVersion}
                    docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:s3-${JasperReportsServerVersion}
                    docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro-cmdline:s3-${JasperReportsServerVersion}
      
                    echo 'JasperReports Server-Containers-AWS: End of EC2 Instance UserData execution, shutting down...'
                    sudo poweroff

    ECRRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${AWS::StackName}-ECRRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: jrs-image-init-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecr:*",
                                "s3:*",
                                "logs:*"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECRInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECRRole

    JRSS3Bucket:
        Type: AWS::S3::Bucket
        Condition: CreateS3BucketCondition
        DeletionPolicy: Retain


#################### Output Section ####################
Outputs:

    jasperserverProECR:
        Description: Amazon ECR (Amazon EC2 Container Registry) for JasperReports Server images.
        Value: !Join
            - ''
            -
                - 'https://console.aws.amazon.com/ecr/home?region='
                - !Ref 'AWS::Region'
                - '#/repositories/jasperserver-pro#images'

    jasperserverProCmdlineECR:
        Description: Amazon ECR (Amazon EC2 Container Registry)) for JasperReports Server command line images.
        Value: !Join
            - ''
            -
                - 'https://console.aws.amazon.com/ecr/home?region='
                - !Ref 'AWS::Region'
                - '#/repositories/jasperserver-pro-cmdline#images'

    S3Bucket:
        Description: The S3 Bucket to be used for customizing the base images.
        Value: !Join
            - ''
            -
                - 'https://console.aws.amazon.com/s3/home?region='
                - !Ref 'AWS::Region'
                - '&bucket='
                - !If [CreateS3BucketCondition, !Ref JRSS3Bucket, !Ref S3BucketName]
